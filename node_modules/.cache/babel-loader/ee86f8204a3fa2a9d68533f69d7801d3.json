{"ast":null,"code":"function bfs(startNode, endNode) {\n  let q = [];\n  let visited = [];\n  let finalPath = [];\n  q.push(startNode);\n\n  while (q.length > 0) {\n    let current = q[0];\n\n    if (current == endNode) {\n      console.log(\"Done Done Done !!!\");\n      let temp = current;\n      finalPath.push(temp);\n\n      while (temp.previous) {\n        finalPath.push(temp.previous);\n        temp = temp.previous;\n      }\n\n      return {\n        finalPath,\n        visited\n      };\n    }\n\n    q = q.filter(elt => elt !== current);\n    visited.push(current);\n\n    for (let nbPos = 0; nbPos < current.neighbors.length; nbPos++) {\n      let neighbor = current.neighbors[nbPos];\n\n      if (document.getElementById(`node-${neighbor.x}-${neighbor.y}`).className == 'node-wall') {\n        continue;\n      }\n\n      if (!visited.includes(neighbor)) {\n        if (!q.includes(neighbor)) {\n          q.push(neighbor);\n          neighbor.previous = current;\n        }\n      }\n    }\n  }\n\n  return {\n    finalPath,\n    visited,\n    error: 'No Path Found!!!'\n  };\n}\n\nexport default bfs;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Pathfinding-Visualizer-ReactJS-master/src/main/components/bfs/bfs.js"],"names":["bfs","startNode","endNode","q","visited","finalPath","push","length","current","console","log","temp","previous","filter","elt","nbPos","neighbors","neighbor","document","getElementById","x","y","className","includes","error"],"mappings":"AAAA,SAASA,GAAT,CAAcC,SAAd,EAAyBC,OAAzB,EAAkC;AAC9B,MAAIC,CAAC,GAAG,EAAR;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEAF,EAAAA,CAAC,CAACG,IAAF,CAAOL,SAAP;;AACA,SAAOE,CAAC,CAACI,MAAF,GAAW,CAAlB,EAAqB;AACjB,QAAIC,OAAO,GAAGL,CAAC,CAAC,CAAD,CAAf;;AACA,QAAIK,OAAO,IAAIN,OAAf,EAAwB;AACpBO,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEA,UAAIC,IAAI,GAAGH,OAAX;AACAH,MAAAA,SAAS,CAACC,IAAV,CAAeK,IAAf;;AACA,aAAOA,IAAI,CAACC,QAAZ,EAAsB;AAClBP,QAAAA,SAAS,CAACC,IAAV,CAAeK,IAAI,CAACC,QAApB;AACAD,QAAAA,IAAI,GAAGA,IAAI,CAACC,QAAZ;AACH;;AAED,aAAO;AAACP,QAAAA,SAAD;AAAYD,QAAAA;AAAZ,OAAP;AACH;;AAEDD,IAAAA,CAAC,GAAGA,CAAC,CAACU,MAAF,CAASC,GAAG,IAAIA,GAAG,KAAGN,OAAtB,CAAJ;AACAJ,IAAAA,OAAO,CAACE,IAAR,CAAaE,OAAb;;AAEA,SAAK,IAAIO,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,OAAO,CAACQ,SAAR,CAAkBT,MAA9C,EAAuDQ,KAAK,EAA5D,EAAgE;AAC5D,UAAIE,QAAQ,GAAGT,OAAO,CAACQ,SAAR,CAAkBD,KAAlB,CAAf;;AAEA,UAAIG,QAAQ,CAACC,cAAT,CAAyB,QAAOF,QAAQ,CAACG,CAAE,IAAGH,QAAQ,CAACI,CAAE,EAAzD,EAA4DC,SAA5D,IAAyE,WAA7E,EAA0F;AACtF;AACH;;AAED,UAAI,CAAClB,OAAO,CAACmB,QAAR,CAAiBN,QAAjB,CAAL,EAAiC;AAC7B,YAAI,CAACd,CAAC,CAACoB,QAAF,CAAWN,QAAX,CAAL,EAA2B;AACvBd,UAAAA,CAAC,CAACG,IAAF,CAAOW,QAAP;AACAA,UAAAA,QAAQ,CAACL,QAAT,GAAoBJ,OAApB;AACH;AACJ;AACJ;AACJ;;AAED,SAAO;AAACH,IAAAA,SAAD;AAAYD,IAAAA,OAAZ;AAAqBoB,IAAAA,KAAK,EAAC;AAA3B,GAAP;AACH;;AAED,eAAexB,GAAf","sourcesContent":["function bfs( startNode, endNode ){\n    let q = [];\n    let visited = [];\n    let finalPath = [];\n\n    q.push(startNode);\n    while( q.length > 0 ){\n        let current = q[0];\n        if( current == endNode ){\n            console.log(\"Done Done Done !!!\");\n\n            let temp = current;\n            finalPath.push(temp);\n            while( temp.previous ){\n                finalPath.push(temp.previous);\n                temp = temp.previous;\n            }\n\n            return {finalPath, visited};\n        }\n\n        q = q.filter(elt => elt!==current);\n        visited.push(current);\n\n        for( let nbPos = 0; nbPos < current.neighbors.length ; nbPos++ ){\n            let neighbor = current.neighbors[nbPos];\n\n            if( document.getElementById(`node-${neighbor.x}-${neighbor.y}`).className == 'node-wall' ){\n                continue;\n            }\n\n            if( !visited.includes(neighbor) ){\n                if( !q.includes(neighbor) ){\n                    q.push(neighbor);\n                    neighbor.previous = current;       \n                }\n            }\n        }\n    }\n\n    return {finalPath, visited, error:'No Path Found!!!'};\n}\n\nexport default bfs;\n"]},"metadata":{},"sourceType":"module"}