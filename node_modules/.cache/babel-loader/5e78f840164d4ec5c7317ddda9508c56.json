{"ast":null,"code":"import { scryRenderedComponentsWithType } from \"react-dom/test-utils\";\n\nfunction simpleMaze(startNode, endNode, rows, cols) {\n  let walls = [];\n  let random_0_1 = [0, 1, 1, 1];\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (!(startNode.x == i && startNode.y == j)) {\n        if (!(endNode.x == i && endNode.y == j)) {\n          let random = Math.floor(Math.random() * random_0_1.length);\n\n          if (random_0_1[random] == 0) {\n            walls.push([i, j]);\n          }\n        }\n      }\n    }\n  }\n\n  return walls;\n}\n\nexport default simpleMaze;","map":{"version":3,"sources":["D:/PM/New folder/Pathfinding-Visualizer-ReactJS-master/src/main/components/simpleMaze/simpleMaze.js"],"names":["scryRenderedComponentsWithType","simpleMaze","startNode","endNode","rows","cols","walls","random_0_1","i","j","x","y","random","Math","floor","length","push"],"mappings":"AAAA,SAASA,8BAAT,QAA+C,sBAA/C;;AAEA,SAASC,UAAT,CAAqBC,SAArB,EAAgCC,OAAhC,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqD;AACjD,MAAIC,KAAK,GAAG,EAAZ;AAEA,MAAIC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACJ,IAAf,EAAoBI,CAAC,EAArB,EAAyB;AACrB,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACJ,IAAf,EAAoBI,CAAC,EAArB,EAAyB;AACrB,UAAI,EAAEP,SAAS,CAACQ,CAAV,IAAeF,CAAf,IAAoBN,SAAS,CAACS,CAAV,IAAeF,CAArC,CAAJ,EAA6C;AACzC,YAAI,EAAEN,OAAO,CAACO,CAAR,IAAaF,CAAb,IAAkBL,OAAO,CAACQ,CAAR,IAAaF,CAAjC,CAAJ,EAAyC;AACrC,cAAIG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBL,UAAU,CAACQ,MAAtC,CAAb;;AACA,cAAIR,UAAU,CAACK,MAAD,CAAV,IAAsB,CAA1B,EAA6B;AACzBN,YAAAA,KAAK,CAACU,IAAN,CAAW,CAACR,CAAD,EAAIC,CAAJ,CAAX;AACH;AACJ;AACJ;AAEJ;AACJ;;AAED,SAAOH,KAAP;AACH;;AAED,eAAeL,UAAf","sourcesContent":["import { scryRenderedComponentsWithType } from \"react-dom/test-utils\";\n\nfunction simpleMaze( startNode, endNode, rows, cols ){\n    let walls = [];\n\n    let random_0_1 = [0, 1, 1, 1];\n\n    for( let i=0;i<rows;i++ ){\n        for( let j=0;j<cols;j++ ){\n            if( !(startNode.x == i && startNode.y == j) ){\n                if( !(endNode.x == i && endNode.y == j) ){\n                    let random = Math.floor(Math.random() * random_0_1.length);\n                    if( random_0_1[random] == 0 ){\n                        walls.push([i, j]);\n                    }\n                }\n            }\n\n        }\n    }\n\n    return walls;\n}\n\nexport default simpleMaze;\n"]},"metadata":{},"sourceType":"module"}